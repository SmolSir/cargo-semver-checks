SemverQuery(
    id: "method_must_use_added",
    human_readable_name: "method #[must_use] added",
    description: "A method has been marked with #[must_use].",
    required_update: Minor,

    // TODO: Change the reference link to point to the cargo semver reference
    //       once it has a section on attribute #[must_use].
    reference_link: Some("https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute"),
    query: r#"
    {
        CrateDiff {
            baseline {
                item {
                    ... on ImplOwner {
                        visibility_limit @filter(op: "=", value: ["$public"]) @output
                        name @tag @output

                        importable_path {
                            path @tag @output
                        }

                        inherent_impl {
                            method {
                                method_visibility: visibility_limit @filter(op: "=", value: ["$public"]) @output
                                method_name: name @tag @output

                                attribute @fold @transform(op: "count") @filter(op: "=", value: ["$zero"]) {
                                    content {
                                        base @filter(op: "=", value: ["$must_use"])
                                    }
                                }
                            }
                        }
                    }
                }
            }
            current {
                item {
                    ... on ImplOwner {
                        visibility_limit @filter(op: "=", value: ["$public"])
                        name @filter(op: "=", value: ["%name"])

                        importable_path {
                            path @filter(op: "=", value: ["%path"])
                        }

                        # We use "impl" instead of "inherent_impl" here because moving
                        # an inherently-implemented method to a trait is not necessarily
                        # a breaking change, so we don't want to report it.
                        #
                        # It is also important to notice that #[must_use] can only be
                        # added to the method declaration or definition inside the trait.
                        # When #[must_use] is added to the definition inside an
                        # impl <trait_name> for <...> the attribute is ignored as only
                        # the attributes from the trait method declaration are applied.

                        impl {
                            method {
                                visibility_limit @filter(op: "one_of", value: ["$public_or_default"])
                                name @filter(op: "=", value: ["%method_name"])

                                attribute {
                                    new_attr: raw_attribute @output
                                    content {
                                        base @filter(op: "=", value: ["$must_use"])
                                    }
                                }

                                span_: span @optional {
                                    filename @output
                                    begin_line @output
                                }
                            }
                        }
                    }
                }
            }
        }
    }"#,
    arguments: {
        "public": "public",
        "public_or_default": ["public", "default"],
        "must_use": "must_use",
        "zero": 0,
    },
    error_message: "A method has been marked with #[must_use]. This can cause downstream crates that did not use the value returned by this method to get a compiler lint.",
    per_result_error_template: Some("method {{join \"::\" path}}::{{method_name}} in {{span_filename}}:{{span_begin_line}}"),
)
